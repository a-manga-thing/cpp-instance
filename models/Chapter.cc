/**
 *
 *  Chapter.cc
 *  DO NOT EDIT. This file is generated by drogon_ctl
 *
 */

#include "Chapter.h"
#include "Manga.h"
#include <drogon/utils/Utilities.h>
#include <string>

using namespace drogon;
using namespace drogon_model::sqlite3;

const std::string Chapter::Cols::_id = "id";
const std::string Chapter::Cols::_manga_id = "manga_id";
const std::string Chapter::Cols::_manga_global_id = "manga_global_id";
const std::string Chapter::Cols::_chapter_no = "chapter_no";
const std::string Chapter::Cols::_chapter_postfix = "chapter_postfix";
const std::string Chapter::Cols::_ordinal = "ordinal";
const std::string Chapter::Cols::_pages = "pages";
const std::string Chapter::Cols::_title = "title";
const std::string Chapter::Cols::_version = "version";
const std::string Chapter::Cols::_language_id = "language_id";
const std::string Chapter::Cols::_group_id = "group_id";
const std::string Chapter::Cols::_date_added = "date_added";
const std::string Chapter::Cols::_ipfs_link = "ipfs_link";
const std::string Chapter::Cols::_global_id = "global_id";
const std::string Chapter::Cols::_last_update = "last_update";
const std::string Chapter::primaryKeyName = "id";
const bool Chapter::hasPrimaryKey = true;
const std::string Chapter::tableName = "chapter";

const std::vector<typename Chapter::MetaData> Chapter::metaData_={
{"id","uint64_t","integer",8,1,1,1},
{"manga_id","uint64_t","integer",8,0,0,1},
{"manga_global_id","std::string","string",0,0,0,1},
{"chapter_no","uint64_t","integer",8,0,0,1},
{"chapter_postfix","std::string","string",0,0,0,0},
{"ordinal","uint64_t","integer",8,0,0,1},
{"pages","uint64_t","integer",8,0,0,1},
{"title","std::string","string",0,0,0,0},
{"version","uint64_t","integer",8,0,0,0},
{"language_id","std::string","string",0,0,0,1},
{"group_id","uint64_t","integer",8,0,0,0},
{"date_added","uint64_t","integer",8,0,0,1},
{"ipfs_link","std::string","string",0,0,0,1},
{"global_id","std::string","string",0,0,0,1},
{"last_update","uint64_t","integer",8,0,0,1}
};
const std::string &Chapter::getColumnName(size_t index) noexcept(false)
{
    assert(index < metaData_.size());
    return metaData_[index].colName_;
}
Chapter::Chapter(const Row &r, const ssize_t indexOffset) noexcept
{
    if(indexOffset < 0)
    {
        if(!r["id"].isNull())
        {
            id_=std::make_shared<uint64_t>(r["id"].as<uint64_t>());
        }
        if(!r["manga_id"].isNull())
        {
            mangaId_=std::make_shared<uint64_t>(r["manga_id"].as<uint64_t>());
        }
        if(!r["manga_global_id"].isNull())
        {
            mangaGlobalId_=std::make_shared<std::string>(r["manga_global_id"].as<std::string>());
        }
        if(!r["chapter_no"].isNull())
        {
            chapterNo_=std::make_shared<uint64_t>(r["chapter_no"].as<uint64_t>());
        }
        if(!r["chapter_postfix"].isNull())
        {
            chapterPostfix_=std::make_shared<std::string>(r["chapter_postfix"].as<std::string>());
        }
        if(!r["ordinal"].isNull())
        {
            ordinal_=std::make_shared<uint64_t>(r["ordinal"].as<uint64_t>());
        }
        if(!r["pages"].isNull())
        {
            pages_=std::make_shared<uint64_t>(r["pages"].as<uint64_t>());
        }
        if(!r["title"].isNull())
        {
            title_=std::make_shared<std::string>(r["title"].as<std::string>());
        }
        if(!r["version"].isNull())
        {
            version_=std::make_shared<uint64_t>(r["version"].as<uint64_t>());
        }
        if(!r["language_id"].isNull())
        {
            languageId_=std::make_shared<std::string>(r["language_id"].as<std::string>());
        }
        if(!r["group_id"].isNull())
        {
            groupId_=std::make_shared<uint64_t>(r["group_id"].as<uint64_t>());
        }
        if(!r["date_added"].isNull())
        {
            dateAdded_=std::make_shared<uint64_t>(r["date_added"].as<uint64_t>());
        }
        if(!r["ipfs_link"].isNull())
        {
            ipfsLink_=std::make_shared<std::string>(r["ipfs_link"].as<std::string>());
        }
        if(!r["global_id"].isNull())
        {
            globalId_=std::make_shared<std::string>(r["global_id"].as<std::string>());
        }
        if(!r["last_update"].isNull())
        {
            lastUpdate_=std::make_shared<uint64_t>(r["last_update"].as<uint64_t>());
        }
    }
    else
    {
        size_t offset = (size_t)indexOffset;
        if(offset + 15 > r.size())
        {
            LOG_FATAL << "Invalid SQL result for this model";
            return;
        }
        size_t index;
        index = offset + 0;
        if(!r[index].isNull())
        {
            id_=std::make_shared<uint64_t>(r[index].as<uint64_t>());
        }
        index = offset + 1;
        if(!r[index].isNull())
        {
            mangaId_=std::make_shared<uint64_t>(r[index].as<uint64_t>());
        }
        index = offset + 2;
        if(!r[index].isNull())
        {
            mangaGlobalId_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 3;
        if(!r[index].isNull())
        {
            chapterNo_=std::make_shared<uint64_t>(r[index].as<uint64_t>());
        }
        index = offset + 4;
        if(!r[index].isNull())
        {
            chapterPostfix_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 5;
        if(!r[index].isNull())
        {
            ordinal_=std::make_shared<uint64_t>(r[index].as<uint64_t>());
        }
        index = offset + 6;
        if(!r[index].isNull())
        {
            pages_=std::make_shared<uint64_t>(r[index].as<uint64_t>());
        }
        index = offset + 7;
        if(!r[index].isNull())
        {
            title_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 8;
        if(!r[index].isNull())
        {
            version_=std::make_shared<uint64_t>(r[index].as<uint64_t>());
        }
        index = offset + 9;
        if(!r[index].isNull())
        {
            languageId_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 10;
        if(!r[index].isNull())
        {
            groupId_=std::make_shared<uint64_t>(r[index].as<uint64_t>());
        }
        index = offset + 11;
        if(!r[index].isNull())
        {
            dateAdded_=std::make_shared<uint64_t>(r[index].as<uint64_t>());
        }
        index = offset + 12;
        if(!r[index].isNull())
        {
            ipfsLink_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 13;
        if(!r[index].isNull())
        {
            globalId_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 14;
        if(!r[index].isNull())
        {
            lastUpdate_=std::make_shared<uint64_t>(r[index].as<uint64_t>());
        }
    }

}

Chapter::Chapter(const Json::Value &pJson, const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if(pMasqueradingVector.size() != 15)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        dirtyFlag_[0] = true;
        if(!pJson[pMasqueradingVector[0]].isNull())
        {
            id_=std::make_shared<uint64_t>((uint64_t)pJson[pMasqueradingVector[0]].asUInt64());
        }
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        dirtyFlag_[1] = true;
        if(!pJson[pMasqueradingVector[1]].isNull())
        {
            mangaId_=std::make_shared<uint64_t>((uint64_t)pJson[pMasqueradingVector[1]].asUInt64());
        }
    }
    if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        dirtyFlag_[2] = true;
        if(!pJson[pMasqueradingVector[2]].isNull())
        {
            mangaGlobalId_=std::make_shared<std::string>(pJson[pMasqueradingVector[2]].asString());

        }
    }
    if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
    {
        dirtyFlag_[3] = true;
        if(!pJson[pMasqueradingVector[3]].isNull())
        {
            chapterNo_=std::make_shared<uint64_t>((uint64_t)pJson[pMasqueradingVector[3]].asUInt64());
        }
    }
    if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
    {
        dirtyFlag_[4] = true;
        if(!pJson[pMasqueradingVector[4]].isNull())
        {
            chapterPostfix_=std::make_shared<std::string>(pJson[pMasqueradingVector[4]].asString());

        }
    }
    if(!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
    {
        dirtyFlag_[5] = true;
        if(!pJson[pMasqueradingVector[5]].isNull())
        {
            ordinal_=std::make_shared<uint64_t>((uint64_t)pJson[pMasqueradingVector[5]].asUInt64());
        }
    }
    if(!pMasqueradingVector[6].empty() && pJson.isMember(pMasqueradingVector[6]))
    {
        dirtyFlag_[6] = true;
        if(!pJson[pMasqueradingVector[6]].isNull())
        {
            pages_=std::make_shared<uint64_t>((uint64_t)pJson[pMasqueradingVector[6]].asUInt64());
        }
    }
    if(!pMasqueradingVector[7].empty() && pJson.isMember(pMasqueradingVector[7]))
    {
        dirtyFlag_[7] = true;
        if(!pJson[pMasqueradingVector[7]].isNull())
        {
            title_=std::make_shared<std::string>(pJson[pMasqueradingVector[7]].asString());

        }
    }
    if(!pMasqueradingVector[8].empty() && pJson.isMember(pMasqueradingVector[8]))
    {
        dirtyFlag_[8] = true;
        if(!pJson[pMasqueradingVector[8]].isNull())
        {
            version_=std::make_shared<uint64_t>((uint64_t)pJson[pMasqueradingVector[8]].asUInt64());
        }
    }
    if(!pMasqueradingVector[9].empty() && pJson.isMember(pMasqueradingVector[9]))
    {
        dirtyFlag_[9] = true;
        if(!pJson[pMasqueradingVector[9]].isNull())
        {
            languageId_=std::make_shared<std::string>(pJson[pMasqueradingVector[9]].asString());

        }
    }
    if(!pMasqueradingVector[10].empty() && pJson.isMember(pMasqueradingVector[10]))
    {
        dirtyFlag_[10] = true;
        if(!pJson[pMasqueradingVector[10]].isNull())
        {
            groupId_=std::make_shared<uint64_t>((uint64_t)pJson[pMasqueradingVector[10]].asUInt64());
        }
    }
    if(!pMasqueradingVector[11].empty() && pJson.isMember(pMasqueradingVector[11]))
    {
        dirtyFlag_[11] = true;
        if(!pJson[pMasqueradingVector[11]].isNull())
        {
            dateAdded_=std::make_shared<uint64_t>((uint64_t)pJson[pMasqueradingVector[11]].asUInt64());
        }
    }
    if(!pMasqueradingVector[12].empty() && pJson.isMember(pMasqueradingVector[12]))
    {
        dirtyFlag_[12] = true;
        if(!pJson[pMasqueradingVector[12]].isNull())
        {
            ipfsLink_=std::make_shared<std::string>(pJson[pMasqueradingVector[12]].asString());

        }
    }
    if(!pMasqueradingVector[13].empty() && pJson.isMember(pMasqueradingVector[13]))
    {
        dirtyFlag_[13] = true;
        if(!pJson[pMasqueradingVector[13]].isNull())
        {
            globalId_=std::make_shared<std::string>(pJson[pMasqueradingVector[13]].asString());

        }
    }
    if(!pMasqueradingVector[14].empty() && pJson.isMember(pMasqueradingVector[14]))
    {
        dirtyFlag_[14] = true;
        if(!pJson[pMasqueradingVector[14]].isNull())
        {
            lastUpdate_=std::make_shared<uint64_t>((uint64_t)pJson[pMasqueradingVector[14]].asUInt64());
        }
    }
}

Chapter::Chapter(const Json::Value &pJson) noexcept(false)
{
    if(pJson.isMember("id"))
    {
        dirtyFlag_[0]=true;
        if(!pJson["id"].isNull())
        {
            id_=std::make_shared<uint64_t>((uint64_t)pJson["id"].asUInt64());
        }
    }
    if(pJson.isMember("manga_id"))
    {
        dirtyFlag_[1]=true;
        if(!pJson["manga_id"].isNull())
        {
            mangaId_=std::make_shared<uint64_t>((uint64_t)pJson["manga_id"].asUInt64());
        }
    }
    if(pJson.isMember("manga_global_id"))
    {
        dirtyFlag_[2]=true;
        if(!pJson["manga_global_id"].isNull())
        {
            mangaGlobalId_=std::make_shared<std::string>(pJson["manga_global_id"].asString());
        }
    }
    if(pJson.isMember("chapter_no"))
    {
        dirtyFlag_[3]=true;
        if(!pJson["chapter_no"].isNull())
        {
            chapterNo_=std::make_shared<uint64_t>((uint64_t)pJson["chapter_no"].asUInt64());
        }
    }
    if(pJson.isMember("chapter_postfix"))
    {
        dirtyFlag_[4]=true;
        if(!pJson["chapter_postfix"].isNull())
        {
            chapterPostfix_=std::make_shared<std::string>(pJson["chapter_postfix"].asString());
        }
    }
    if(pJson.isMember("ordinal"))
    {
        dirtyFlag_[5]=true;
        if(!pJson["ordinal"].isNull())
        {
            ordinal_=std::make_shared<uint64_t>((uint64_t)pJson["ordinal"].asUInt64());
        }
    }
    if(pJson.isMember("pages"))
    {
        dirtyFlag_[6]=true;
        if(!pJson["pages"].isNull())
        {
            pages_=std::make_shared<uint64_t>((uint64_t)pJson["pages"].asUInt64());
        }
    }
    if(pJson.isMember("title"))
    {
        dirtyFlag_[7]=true;
        if(!pJson["title"].isNull())
        {
            title_=std::make_shared<std::string>(pJson["title"].asString());
        }
    }
    if(pJson.isMember("version"))
    {
        dirtyFlag_[8]=true;
        if(!pJson["version"].isNull())
        {
            version_=std::make_shared<uint64_t>((uint64_t)pJson["version"].asUInt64());
        }
    }
    if(pJson.isMember("language_id"))
    {
        dirtyFlag_[9]=true;
        if(!pJson["language_id"].isNull())
        {
            languageId_=std::make_shared<std::string>(pJson["language_id"].asString());
        }
    }
    if(pJson.isMember("group_id"))
    {
        dirtyFlag_[10]=true;
        if(!pJson["group_id"].isNull())
        {
            groupId_=std::make_shared<uint64_t>((uint64_t)pJson["group_id"].asUInt64());
        }
    }
    if(pJson.isMember("date_added"))
    {
        dirtyFlag_[11]=true;
        if(!pJson["date_added"].isNull())
        {
            dateAdded_=std::make_shared<uint64_t>((uint64_t)pJson["date_added"].asUInt64());
        }
    }
    if(pJson.isMember("ipfs_link"))
    {
        dirtyFlag_[12]=true;
        if(!pJson["ipfs_link"].isNull())
        {
            ipfsLink_=std::make_shared<std::string>(pJson["ipfs_link"].asString());
        }
    }
    if(pJson.isMember("global_id"))
    {
        dirtyFlag_[13]=true;
        if(!pJson["global_id"].isNull())
        {
            globalId_=std::make_shared<std::string>(pJson["global_id"].asString());
        }
    }
    if(pJson.isMember("last_update"))
    {
        dirtyFlag_[14]=true;
        if(!pJson["last_update"].isNull())
        {
            lastUpdate_=std::make_shared<uint64_t>((uint64_t)pJson["last_update"].asUInt64());
        }
    }
}

void Chapter::updateByMasqueradedJson(const Json::Value &pJson,
                                            const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if(pMasqueradingVector.size() != 15)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        if(!pJson[pMasqueradingVector[0]].isNull())
        {
            id_=std::make_shared<uint64_t>((uint64_t)pJson[pMasqueradingVector[0]].asUInt64());
        }
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        dirtyFlag_[1] = true;
        if(!pJson[pMasqueradingVector[1]].isNull())
        {
            mangaId_=std::make_shared<uint64_t>((uint64_t)pJson[pMasqueradingVector[1]].asUInt64());
        }
    }
    if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        dirtyFlag_[2] = true;
        if(!pJson[pMasqueradingVector[2]].isNull())
        {
            mangaGlobalId_=std::make_shared<std::string>(pJson[pMasqueradingVector[2]].asString());
        }
    }
    if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
    {
        dirtyFlag_[3] = true;
        if(!pJson[pMasqueradingVector[3]].isNull())
        {
            chapterNo_=std::make_shared<uint64_t>((uint64_t)pJson[pMasqueradingVector[3]].asUInt64());
        }
    }
    if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
    {
        dirtyFlag_[4] = true;
        if(!pJson[pMasqueradingVector[4]].isNull())
        {
            chapterPostfix_=std::make_shared<std::string>(pJson[pMasqueradingVector[4]].asString());
        }
    }
    if(!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
    {
        dirtyFlag_[5] = true;
        if(!pJson[pMasqueradingVector[5]].isNull())
        {
            ordinal_=std::make_shared<uint64_t>((uint64_t)pJson[pMasqueradingVector[5]].asUInt64());
        }
    }
    if(!pMasqueradingVector[6].empty() && pJson.isMember(pMasqueradingVector[6]))
    {
        dirtyFlag_[6] = true;
        if(!pJson[pMasqueradingVector[6]].isNull())
        {
            pages_=std::make_shared<uint64_t>((uint64_t)pJson[pMasqueradingVector[6]].asUInt64());
        }
    }
    if(!pMasqueradingVector[7].empty() && pJson.isMember(pMasqueradingVector[7]))
    {
        dirtyFlag_[7] = true;
        if(!pJson[pMasqueradingVector[7]].isNull())
        {
            title_=std::make_shared<std::string>(pJson[pMasqueradingVector[7]].asString());
        }
    }
    if(!pMasqueradingVector[8].empty() && pJson.isMember(pMasqueradingVector[8]))
    {
        dirtyFlag_[8] = true;
        if(!pJson[pMasqueradingVector[8]].isNull())
        {
            version_=std::make_shared<uint64_t>((uint64_t)pJson[pMasqueradingVector[8]].asUInt64());
        }
    }
    if(!pMasqueradingVector[9].empty() && pJson.isMember(pMasqueradingVector[9]))
    {
        dirtyFlag_[9] = true;
        if(!pJson[pMasqueradingVector[9]].isNull())
        {
            languageId_=std::make_shared<std::string>(pJson[pMasqueradingVector[9]].asString());
        }
    }
    if(!pMasqueradingVector[10].empty() && pJson.isMember(pMasqueradingVector[10]))
    {
        dirtyFlag_[10] = true;
        if(!pJson[pMasqueradingVector[10]].isNull())
        {
            groupId_=std::make_shared<uint64_t>((uint64_t)pJson[pMasqueradingVector[10]].asUInt64());
        }
    }
    if(!pMasqueradingVector[11].empty() && pJson.isMember(pMasqueradingVector[11]))
    {
        dirtyFlag_[11] = true;
        if(!pJson[pMasqueradingVector[11]].isNull())
        {
            dateAdded_=std::make_shared<uint64_t>((uint64_t)pJson[pMasqueradingVector[11]].asUInt64());
        }
    }
    if(!pMasqueradingVector[12].empty() && pJson.isMember(pMasqueradingVector[12]))
    {
        dirtyFlag_[12] = true;
        if(!pJson[pMasqueradingVector[12]].isNull())
        {
            ipfsLink_=std::make_shared<std::string>(pJson[pMasqueradingVector[12]].asString());
        }
    }
    if(!pMasqueradingVector[13].empty() && pJson.isMember(pMasqueradingVector[13]))
    {
        dirtyFlag_[13] = true;
        if(!pJson[pMasqueradingVector[13]].isNull())
        {
            globalId_=std::make_shared<std::string>(pJson[pMasqueradingVector[13]].asString());
        }
    }
    if(!pMasqueradingVector[14].empty() && pJson.isMember(pMasqueradingVector[14]))
    {
        dirtyFlag_[14] = true;
        if(!pJson[pMasqueradingVector[14]].isNull())
        {
            lastUpdate_=std::make_shared<uint64_t>((uint64_t)pJson[pMasqueradingVector[14]].asUInt64());
        }
    }
}
                                                                    
void Chapter::updateByJson(const Json::Value &pJson) noexcept(false)
{
    if(pJson.isMember("id"))
    {
        if(!pJson["id"].isNull())
        {
            id_=std::make_shared<uint64_t>((uint64_t)pJson["id"].asUInt64());
        }
    }
    if(pJson.isMember("manga_id"))
    {
        dirtyFlag_[1] = true;
        if(!pJson["manga_id"].isNull())
        {
            mangaId_=std::make_shared<uint64_t>((uint64_t)pJson["manga_id"].asUInt64());
        }
    }
    if(pJson.isMember("manga_global_id"))
    {
        dirtyFlag_[2] = true;
        if(!pJson["manga_global_id"].isNull())
        {
            mangaGlobalId_=std::make_shared<std::string>(pJson["manga_global_id"].asString());
        }
    }
    if(pJson.isMember("chapter_no"))
    {
        dirtyFlag_[3] = true;
        if(!pJson["chapter_no"].isNull())
        {
            chapterNo_=std::make_shared<uint64_t>((uint64_t)pJson["chapter_no"].asUInt64());
        }
    }
    if(pJson.isMember("chapter_postfix"))
    {
        dirtyFlag_[4] = true;
        if(!pJson["chapter_postfix"].isNull())
        {
            chapterPostfix_=std::make_shared<std::string>(pJson["chapter_postfix"].asString());
        }
    }
    if(pJson.isMember("ordinal"))
    {
        dirtyFlag_[5] = true;
        if(!pJson["ordinal"].isNull())
        {
            ordinal_=std::make_shared<uint64_t>((uint64_t)pJson["ordinal"].asUInt64());
        }
    }
    if(pJson.isMember("pages"))
    {
        dirtyFlag_[6] = true;
        if(!pJson["pages"].isNull())
        {
            pages_=std::make_shared<uint64_t>((uint64_t)pJson["pages"].asUInt64());
        }
    }
    if(pJson.isMember("title"))
    {
        dirtyFlag_[7] = true;
        if(!pJson["title"].isNull())
        {
            title_=std::make_shared<std::string>(pJson["title"].asString());
        }
    }
    if(pJson.isMember("version"))
    {
        dirtyFlag_[8] = true;
        if(!pJson["version"].isNull())
        {
            version_=std::make_shared<uint64_t>((uint64_t)pJson["version"].asUInt64());
        }
    }
    if(pJson.isMember("language_id"))
    {
        dirtyFlag_[9] = true;
        if(!pJson["language_id"].isNull())
        {
            languageId_=std::make_shared<std::string>(pJson["language_id"].asString());
        }
    }
    if(pJson.isMember("group_id"))
    {
        dirtyFlag_[10] = true;
        if(!pJson["group_id"].isNull())
        {
            groupId_=std::make_shared<uint64_t>((uint64_t)pJson["group_id"].asUInt64());
        }
    }
    if(pJson.isMember("date_added"))
    {
        dirtyFlag_[11] = true;
        if(!pJson["date_added"].isNull())
        {
            dateAdded_=std::make_shared<uint64_t>((uint64_t)pJson["date_added"].asUInt64());
        }
    }
    if(pJson.isMember("ipfs_link"))
    {
        dirtyFlag_[12] = true;
        if(!pJson["ipfs_link"].isNull())
        {
            ipfsLink_=std::make_shared<std::string>(pJson["ipfs_link"].asString());
        }
    }
    if(pJson.isMember("global_id"))
    {
        dirtyFlag_[13] = true;
        if(!pJson["global_id"].isNull())
        {
            globalId_=std::make_shared<std::string>(pJson["global_id"].asString());
        }
    }
    if(pJson.isMember("last_update"))
    {
        dirtyFlag_[14] = true;
        if(!pJson["last_update"].isNull())
        {
            lastUpdate_=std::make_shared<uint64_t>((uint64_t)pJson["last_update"].asUInt64());
        }
    }
}

const uint64_t &Chapter::getValueOfId() const noexcept
{
    const static uint64_t defaultValue = uint64_t();
    if(id_)
        return *id_;
    return defaultValue;
}
const std::shared_ptr<uint64_t> &Chapter::getId() const noexcept
{
    return id_;
}
void Chapter::setId(const uint64_t &pId) noexcept
{
    id_ = std::make_shared<uint64_t>(pId);
    dirtyFlag_[0] = true;
}



const typename Chapter::PrimaryKeyType & Chapter::getPrimaryKey() const
{
    assert(id_);
    return *id_;
}

const uint64_t &Chapter::getValueOfMangaId() const noexcept
{
    const static uint64_t defaultValue = uint64_t();
    if(mangaId_)
        return *mangaId_;
    return defaultValue;
}
const std::shared_ptr<uint64_t> &Chapter::getMangaId() const noexcept
{
    return mangaId_;
}
void Chapter::setMangaId(const uint64_t &pMangaId) noexcept
{
    mangaId_ = std::make_shared<uint64_t>(pMangaId);
    dirtyFlag_[1] = true;
}




const std::string &Chapter::getValueOfMangaGlobalId() const noexcept
{
    const static std::string defaultValue = std::string();
    if(mangaGlobalId_)
        return *mangaGlobalId_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Chapter::getMangaGlobalId() const noexcept
{
    return mangaGlobalId_;
}
void Chapter::setMangaGlobalId(const std::string &pMangaGlobalId) noexcept
{
    mangaGlobalId_ = std::make_shared<std::string>(pMangaGlobalId);
    dirtyFlag_[2] = true;
}
void Chapter::setMangaGlobalId(std::string &&pMangaGlobalId) noexcept
{
    mangaGlobalId_ = std::make_shared<std::string>(std::move(pMangaGlobalId));
    dirtyFlag_[2] = true;
}




const uint64_t &Chapter::getValueOfChapterNo() const noexcept
{
    const static uint64_t defaultValue = uint64_t();
    if(chapterNo_)
        return *chapterNo_;
    return defaultValue;
}
const std::shared_ptr<uint64_t> &Chapter::getChapterNo() const noexcept
{
    return chapterNo_;
}
void Chapter::setChapterNo(const uint64_t &pChapterNo) noexcept
{
    chapterNo_ = std::make_shared<uint64_t>(pChapterNo);
    dirtyFlag_[3] = true;
}




const std::string &Chapter::getValueOfChapterPostfix() const noexcept
{
    const static std::string defaultValue = std::string();
    if(chapterPostfix_)
        return *chapterPostfix_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Chapter::getChapterPostfix() const noexcept
{
    return chapterPostfix_;
}
void Chapter::setChapterPostfix(const std::string &pChapterPostfix) noexcept
{
    chapterPostfix_ = std::make_shared<std::string>(pChapterPostfix);
    dirtyFlag_[4] = true;
}
void Chapter::setChapterPostfix(std::string &&pChapterPostfix) noexcept
{
    chapterPostfix_ = std::make_shared<std::string>(std::move(pChapterPostfix));
    dirtyFlag_[4] = true;
}


void Chapter::setChapterPostfixToNull() noexcept
{
    chapterPostfix_.reset();
    dirtyFlag_[4] = true;
}


const uint64_t &Chapter::getValueOfOrdinal() const noexcept
{
    const static uint64_t defaultValue = uint64_t();
    if(ordinal_)
        return *ordinal_;
    return defaultValue;
}
const std::shared_ptr<uint64_t> &Chapter::getOrdinal() const noexcept
{
    return ordinal_;
}
void Chapter::setOrdinal(const uint64_t &pOrdinal) noexcept
{
    ordinal_ = std::make_shared<uint64_t>(pOrdinal);
    dirtyFlag_[5] = true;
}




const uint64_t &Chapter::getValueOfPages() const noexcept
{
    const static uint64_t defaultValue = uint64_t();
    if(pages_)
        return *pages_;
    return defaultValue;
}
const std::shared_ptr<uint64_t> &Chapter::getPages() const noexcept
{
    return pages_;
}
void Chapter::setPages(const uint64_t &pPages) noexcept
{
    pages_ = std::make_shared<uint64_t>(pPages);
    dirtyFlag_[6] = true;
}




const std::string &Chapter::getValueOfTitle() const noexcept
{
    const static std::string defaultValue = std::string();
    if(title_)
        return *title_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Chapter::getTitle() const noexcept
{
    return title_;
}
void Chapter::setTitle(const std::string &pTitle) noexcept
{
    title_ = std::make_shared<std::string>(pTitle);
    dirtyFlag_[7] = true;
}
void Chapter::setTitle(std::string &&pTitle) noexcept
{
    title_ = std::make_shared<std::string>(std::move(pTitle));
    dirtyFlag_[7] = true;
}


void Chapter::setTitleToNull() noexcept
{
    title_.reset();
    dirtyFlag_[7] = true;
}


const uint64_t &Chapter::getValueOfVersion() const noexcept
{
    const static uint64_t defaultValue = uint64_t();
    if(version_)
        return *version_;
    return defaultValue;
}
const std::shared_ptr<uint64_t> &Chapter::getVersion() const noexcept
{
    return version_;
}
void Chapter::setVersion(const uint64_t &pVersion) noexcept
{
    version_ = std::make_shared<uint64_t>(pVersion);
    dirtyFlag_[8] = true;
}


void Chapter::setVersionToNull() noexcept
{
    version_.reset();
    dirtyFlag_[8] = true;
}


const std::string &Chapter::getValueOfLanguageId() const noexcept
{
    const static std::string defaultValue = std::string();
    if(languageId_)
        return *languageId_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Chapter::getLanguageId() const noexcept
{
    return languageId_;
}
void Chapter::setLanguageId(const std::string &pLanguageId) noexcept
{
    languageId_ = std::make_shared<std::string>(pLanguageId);
    dirtyFlag_[9] = true;
}
void Chapter::setLanguageId(std::string &&pLanguageId) noexcept
{
    languageId_ = std::make_shared<std::string>(std::move(pLanguageId));
    dirtyFlag_[9] = true;
}




const uint64_t &Chapter::getValueOfGroupId() const noexcept
{
    const static uint64_t defaultValue = uint64_t();
    if(groupId_)
        return *groupId_;
    return defaultValue;
}
const std::shared_ptr<uint64_t> &Chapter::getGroupId() const noexcept
{
    return groupId_;
}
void Chapter::setGroupId(const uint64_t &pGroupId) noexcept
{
    groupId_ = std::make_shared<uint64_t>(pGroupId);
    dirtyFlag_[10] = true;
}


void Chapter::setGroupIdToNull() noexcept
{
    groupId_.reset();
    dirtyFlag_[10] = true;
}


const uint64_t &Chapter::getValueOfDateAdded() const noexcept
{
    const static uint64_t defaultValue = uint64_t();
    if(dateAdded_)
        return *dateAdded_;
    return defaultValue;
}
const std::shared_ptr<uint64_t> &Chapter::getDateAdded() const noexcept
{
    return dateAdded_;
}
void Chapter::setDateAdded(const uint64_t &pDateAdded) noexcept
{
    dateAdded_ = std::make_shared<uint64_t>(pDateAdded);
    dirtyFlag_[11] = true;
}




const std::string &Chapter::getValueOfIpfsLink() const noexcept
{
    const static std::string defaultValue = std::string();
    if(ipfsLink_)
        return *ipfsLink_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Chapter::getIpfsLink() const noexcept
{
    return ipfsLink_;
}
void Chapter::setIpfsLink(const std::string &pIpfsLink) noexcept
{
    ipfsLink_ = std::make_shared<std::string>(pIpfsLink);
    dirtyFlag_[12] = true;
}
void Chapter::setIpfsLink(std::string &&pIpfsLink) noexcept
{
    ipfsLink_ = std::make_shared<std::string>(std::move(pIpfsLink));
    dirtyFlag_[12] = true;
}




const std::string &Chapter::getValueOfGlobalId() const noexcept
{
    const static std::string defaultValue = std::string();
    if(globalId_)
        return *globalId_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Chapter::getGlobalId() const noexcept
{
    return globalId_;
}
void Chapter::setGlobalId(const std::string &pGlobalId) noexcept
{
    globalId_ = std::make_shared<std::string>(pGlobalId);
    dirtyFlag_[13] = true;
}
void Chapter::setGlobalId(std::string &&pGlobalId) noexcept
{
    globalId_ = std::make_shared<std::string>(std::move(pGlobalId));
    dirtyFlag_[13] = true;
}




const uint64_t &Chapter::getValueOfLastUpdate() const noexcept
{
    const static uint64_t defaultValue = uint64_t();
    if(lastUpdate_)
        return *lastUpdate_;
    return defaultValue;
}
const std::shared_ptr<uint64_t> &Chapter::getLastUpdate() const noexcept
{
    return lastUpdate_;
}
void Chapter::setLastUpdate(const uint64_t &pLastUpdate) noexcept
{
    lastUpdate_ = std::make_shared<uint64_t>(pLastUpdate);
    dirtyFlag_[14] = true;
}




void Chapter::updateId(const uint64_t id)
{
    id_ = std::make_shared<uint64_t>(id);
}

const std::vector<std::string> &Chapter::insertColumns() noexcept
{
    static const std::vector<std::string> inCols={
        "manga_id",
        "manga_global_id",
        "chapter_no",
        "chapter_postfix",
        "ordinal",
        "pages",
        "title",
        "version",
        "language_id",
        "group_id",
        "date_added",
        "ipfs_link",
        "global_id",
        "last_update"
    };
    return inCols;
}

void Chapter::outputArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(dirtyFlag_[1])
    {
        if(getMangaId())
        {
            binder << getValueOfMangaId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[2])
    {
        if(getMangaGlobalId())
        {
            binder << getValueOfMangaGlobalId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[3])
    {
        if(getChapterNo())
        {
            binder << getValueOfChapterNo();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[4])
    {
        if(getChapterPostfix())
        {
            binder << getValueOfChapterPostfix();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[5])
    {
        if(getOrdinal())
        {
            binder << getValueOfOrdinal();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[6])
    {
        if(getPages())
        {
            binder << getValueOfPages();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[7])
    {
        if(getTitle())
        {
            binder << getValueOfTitle();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[8])
    {
        if(getVersion())
        {
            binder << getValueOfVersion();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[9])
    {
        if(getLanguageId())
        {
            binder << getValueOfLanguageId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[10])
    {
        if(getGroupId())
        {
            binder << getValueOfGroupId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[11])
    {
        if(getDateAdded())
        {
            binder << getValueOfDateAdded();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[12])
    {
        if(getIpfsLink())
        {
            binder << getValueOfIpfsLink();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[13])
    {
        if(getGlobalId())
        {
            binder << getValueOfGlobalId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[14])
    {
        if(getLastUpdate())
        {
            binder << getValueOfLastUpdate();
        }
        else
        {
            binder << nullptr;
        }
    }
}

const std::vector<std::string> Chapter::updateColumns() const
{
    std::vector<std::string> ret;
    if(dirtyFlag_[1])
    {
        ret.push_back(getColumnName(1));
    }
    if(dirtyFlag_[2])
    {
        ret.push_back(getColumnName(2));
    }
    if(dirtyFlag_[3])
    {
        ret.push_back(getColumnName(3));
    }
    if(dirtyFlag_[4])
    {
        ret.push_back(getColumnName(4));
    }
    if(dirtyFlag_[5])
    {
        ret.push_back(getColumnName(5));
    }
    if(dirtyFlag_[6])
    {
        ret.push_back(getColumnName(6));
    }
    if(dirtyFlag_[7])
    {
        ret.push_back(getColumnName(7));
    }
    if(dirtyFlag_[8])
    {
        ret.push_back(getColumnName(8));
    }
    if(dirtyFlag_[9])
    {
        ret.push_back(getColumnName(9));
    }
    if(dirtyFlag_[10])
    {
        ret.push_back(getColumnName(10));
    }
    if(dirtyFlag_[11])
    {
        ret.push_back(getColumnName(11));
    }
    if(dirtyFlag_[12])
    {
        ret.push_back(getColumnName(12));
    }
    if(dirtyFlag_[13])
    {
        ret.push_back(getColumnName(13));
    }
    if(dirtyFlag_[14])
    {
        ret.push_back(getColumnName(14));
    }
    return ret;
}

void Chapter::updateArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(dirtyFlag_[1])
    {
        if(getMangaId())
        {
            binder << getValueOfMangaId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[2])
    {
        if(getMangaGlobalId())
        {
            binder << getValueOfMangaGlobalId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[3])
    {
        if(getChapterNo())
        {
            binder << getValueOfChapterNo();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[4])
    {
        if(getChapterPostfix())
        {
            binder << getValueOfChapterPostfix();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[5])
    {
        if(getOrdinal())
        {
            binder << getValueOfOrdinal();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[6])
    {
        if(getPages())
        {
            binder << getValueOfPages();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[7])
    {
        if(getTitle())
        {
            binder << getValueOfTitle();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[8])
    {
        if(getVersion())
        {
            binder << getValueOfVersion();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[9])
    {
        if(getLanguageId())
        {
            binder << getValueOfLanguageId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[10])
    {
        if(getGroupId())
        {
            binder << getValueOfGroupId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[11])
    {
        if(getDateAdded())
        {
            binder << getValueOfDateAdded();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[12])
    {
        if(getIpfsLink())
        {
            binder << getValueOfIpfsLink();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[13])
    {
        if(getGlobalId())
        {
            binder << getValueOfGlobalId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[14])
    {
        if(getLastUpdate())
        {
            binder << getValueOfLastUpdate();
        }
        else
        {
            binder << nullptr;
        }
    }
}
Json::Value Chapter::toJson() const
{
    Json::Value ret;
    if(getId())
    {
        ret["id"]=(Json::UInt64)getValueOfId();
    }
    else
    {
        ret["id"]=Json::Value();
    }
    if(getMangaId())
    {
        ret["manga_id"]=(Json::UInt64)getValueOfMangaId();
    }
    else
    {
        ret["manga_id"]=Json::Value();
    }
    if(getMangaGlobalId())
    {
        ret["manga_global_id"]=getValueOfMangaGlobalId();
    }
    else
    {
        ret["manga_global_id"]=Json::Value();
    }
    if(getChapterNo())
    {
        ret["chapter_no"]=(Json::UInt64)getValueOfChapterNo();
    }
    else
    {
        ret["chapter_no"]=Json::Value();
    }
    if(getChapterPostfix())
    {
        ret["chapter_postfix"]=getValueOfChapterPostfix();
    }
    else
    {
        ret["chapter_postfix"]=Json::Value();
    }
    if(getOrdinal())
    {
        ret["ordinal"]=(Json::UInt64)getValueOfOrdinal();
    }
    else
    {
        ret["ordinal"]=Json::Value();
    }
    if(getPages())
    {
        ret["pages"]=(Json::UInt64)getValueOfPages();
    }
    else
    {
        ret["pages"]=Json::Value();
    }
    if(getTitle())
    {
        ret["title"]=getValueOfTitle();
    }
    else
    {
        ret["title"]=Json::Value();
    }
    if(getVersion())
    {
        ret["version"]=(Json::UInt64)getValueOfVersion();
    }
    else
    {
        ret["version"]=Json::Value();
    }
    if(getLanguageId())
    {
        ret["language_id"]=getValueOfLanguageId();
    }
    else
    {
        ret["language_id"]=Json::Value();
    }
    if(getGroupId())
    {
        ret["group_id"]=(Json::UInt64)getValueOfGroupId();
    }
    else
    {
        ret["group_id"]=Json::Value();
    }
    if(getDateAdded())
    {
        ret["date_added"]=(Json::UInt64)getValueOfDateAdded();
    }
    else
    {
        ret["date_added"]=Json::Value();
    }
    if(getIpfsLink())
    {
        ret["ipfs_link"]=getValueOfIpfsLink();
    }
    else
    {
        ret["ipfs_link"]=Json::Value();
    }
    if(getGlobalId())
    {
        ret["global_id"]=getValueOfGlobalId();
    }
    else
    {
        ret["global_id"]=Json::Value();
    }
    if(getLastUpdate())
    {
        ret["last_update"]=(Json::UInt64)getValueOfLastUpdate();
    }
    else
    {
        ret["last_update"]=Json::Value();
    }
    return ret;
}

Json::Value Chapter::toMasqueradedJson(
    const std::vector<std::string> &pMasqueradingVector) const
{
    Json::Value ret;
    if(pMasqueradingVector.size() == 15)
    {
        if(!pMasqueradingVector[0].empty())
        {
            if(getId())
            {
                ret[pMasqueradingVector[0]]=(Json::UInt64)getValueOfId();
            }
            else
            {
                ret[pMasqueradingVector[0]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[1].empty())
        {
            if(getMangaId())
            {
                ret[pMasqueradingVector[1]]=(Json::UInt64)getValueOfMangaId();
            }
            else
            {
                ret[pMasqueradingVector[1]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[2].empty())
        {
            if(getMangaGlobalId())
            {
                ret[pMasqueradingVector[2]]=getValueOfMangaGlobalId();
            }
            else
            {
                ret[pMasqueradingVector[2]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[3].empty())
        {
            if(getChapterNo())
            {
                ret[pMasqueradingVector[3]]=(Json::UInt64)getValueOfChapterNo();
            }
            else
            {
                ret[pMasqueradingVector[3]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[4].empty())
        {
            if(getChapterPostfix())
            {
                ret[pMasqueradingVector[4]]=getValueOfChapterPostfix();
            }
            else
            {
                ret[pMasqueradingVector[4]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[5].empty())
        {
            if(getOrdinal())
            {
                ret[pMasqueradingVector[5]]=(Json::UInt64)getValueOfOrdinal();
            }
            else
            {
                ret[pMasqueradingVector[5]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[6].empty())
        {
            if(getPages())
            {
                ret[pMasqueradingVector[6]]=(Json::UInt64)getValueOfPages();
            }
            else
            {
                ret[pMasqueradingVector[6]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[7].empty())
        {
            if(getTitle())
            {
                ret[pMasqueradingVector[7]]=getValueOfTitle();
            }
            else
            {
                ret[pMasqueradingVector[7]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[8].empty())
        {
            if(getVersion())
            {
                ret[pMasqueradingVector[8]]=(Json::UInt64)getValueOfVersion();
            }
            else
            {
                ret[pMasqueradingVector[8]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[9].empty())
        {
            if(getLanguageId())
            {
                ret[pMasqueradingVector[9]]=getValueOfLanguageId();
            }
            else
            {
                ret[pMasqueradingVector[9]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[10].empty())
        {
            if(getGroupId())
            {
                ret[pMasqueradingVector[10]]=(Json::UInt64)getValueOfGroupId();
            }
            else
            {
                ret[pMasqueradingVector[10]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[11].empty())
        {
            if(getDateAdded())
            {
                ret[pMasqueradingVector[11]]=(Json::UInt64)getValueOfDateAdded();
            }
            else
            {
                ret[pMasqueradingVector[11]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[12].empty())
        {
            if(getIpfsLink())
            {
                ret[pMasqueradingVector[12]]=getValueOfIpfsLink();
            }
            else
            {
                ret[pMasqueradingVector[12]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[13].empty())
        {
            if(getGlobalId())
            {
                ret[pMasqueradingVector[13]]=getValueOfGlobalId();
            }
            else
            {
                ret[pMasqueradingVector[13]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[14].empty())
        {
            if(getLastUpdate())
            {
                ret[pMasqueradingVector[14]]=(Json::UInt64)getValueOfLastUpdate();
            }
            else
            {
                ret[pMasqueradingVector[14]]=Json::Value();
            }
        }
        return ret;
    }
    LOG_ERROR << "Masquerade failed";
    if(getId())
    {
        ret["id"]=(Json::UInt64)getValueOfId();
    }
    else
    {
        ret["id"]=Json::Value();
    }
    if(getMangaId())
    {
        ret["manga_id"]=(Json::UInt64)getValueOfMangaId();
    }
    else
    {
        ret["manga_id"]=Json::Value();
    }
    if(getMangaGlobalId())
    {
        ret["manga_global_id"]=getValueOfMangaGlobalId();
    }
    else
    {
        ret["manga_global_id"]=Json::Value();
    }
    if(getChapterNo())
    {
        ret["chapter_no"]=(Json::UInt64)getValueOfChapterNo();
    }
    else
    {
        ret["chapter_no"]=Json::Value();
    }
    if(getChapterPostfix())
    {
        ret["chapter_postfix"]=getValueOfChapterPostfix();
    }
    else
    {
        ret["chapter_postfix"]=Json::Value();
    }
    if(getOrdinal())
    {
        ret["ordinal"]=(Json::UInt64)getValueOfOrdinal();
    }
    else
    {
        ret["ordinal"]=Json::Value();
    }
    if(getPages())
    {
        ret["pages"]=(Json::UInt64)getValueOfPages();
    }
    else
    {
        ret["pages"]=Json::Value();
    }
    if(getTitle())
    {
        ret["title"]=getValueOfTitle();
    }
    else
    {
        ret["title"]=Json::Value();
    }
    if(getVersion())
    {
        ret["version"]=(Json::UInt64)getValueOfVersion();
    }
    else
    {
        ret["version"]=Json::Value();
    }
    if(getLanguageId())
    {
        ret["language_id"]=getValueOfLanguageId();
    }
    else
    {
        ret["language_id"]=Json::Value();
    }
    if(getGroupId())
    {
        ret["group_id"]=(Json::UInt64)getValueOfGroupId();
    }
    else
    {
        ret["group_id"]=Json::Value();
    }
    if(getDateAdded())
    {
        ret["date_added"]=(Json::UInt64)getValueOfDateAdded();
    }
    else
    {
        ret["date_added"]=Json::Value();
    }
    if(getIpfsLink())
    {
        ret["ipfs_link"]=getValueOfIpfsLink();
    }
    else
    {
        ret["ipfs_link"]=Json::Value();
    }
    if(getGlobalId())
    {
        ret["global_id"]=getValueOfGlobalId();
    }
    else
    {
        ret["global_id"]=Json::Value();
    }
    if(getLastUpdate())
    {
        ret["last_update"]=(Json::UInt64)getValueOfLastUpdate();
    }
    else
    {
        ret["last_update"]=Json::Value();
    }
    return ret;
}

bool Chapter::validateJsonForCreation(const Json::Value &pJson, std::string &err)
{
    if(pJson.isMember("id"))
    {
        if(!validJsonOfField(0, "id", pJson["id"], err, true))
            return false;
    }
    if(pJson.isMember("manga_id"))
    {
        if(!validJsonOfField(1, "manga_id", pJson["manga_id"], err, true))
            return false;
    }
    else
    {
        err="The manga_id column cannot be null";
        return false;
    }
    if(pJson.isMember("manga_global_id"))
    {
        if(!validJsonOfField(2, "manga_global_id", pJson["manga_global_id"], err, true))
            return false;
    }
    else
    {
        err="The manga_global_id column cannot be null";
        return false;
    }
    if(pJson.isMember("chapter_no"))
    {
        if(!validJsonOfField(3, "chapter_no", pJson["chapter_no"], err, true))
            return false;
    }
    else
    {
        err="The chapter_no column cannot be null";
        return false;
    }
    if(pJson.isMember("chapter_postfix"))
    {
        if(!validJsonOfField(4, "chapter_postfix", pJson["chapter_postfix"], err, true))
            return false;
    }
    if(pJson.isMember("ordinal"))
    {
        if(!validJsonOfField(5, "ordinal", pJson["ordinal"], err, true))
            return false;
    }
    else
    {
        err="The ordinal column cannot be null";
        return false;
    }
    if(pJson.isMember("pages"))
    {
        if(!validJsonOfField(6, "pages", pJson["pages"], err, true))
            return false;
    }
    else
    {
        err="The pages column cannot be null";
        return false;
    }
    if(pJson.isMember("title"))
    {
        if(!validJsonOfField(7, "title", pJson["title"], err, true))
            return false;
    }
    if(pJson.isMember("version"))
    {
        if(!validJsonOfField(8, "version", pJson["version"], err, true))
            return false;
    }
    if(pJson.isMember("language_id"))
    {
        if(!validJsonOfField(9, "language_id", pJson["language_id"], err, true))
            return false;
    }
    else
    {
        err="The language_id column cannot be null";
        return false;
    }
    if(pJson.isMember("group_id"))
    {
        if(!validJsonOfField(10, "group_id", pJson["group_id"], err, true))
            return false;
    }
    if(pJson.isMember("date_added"))
    {
        if(!validJsonOfField(11, "date_added", pJson["date_added"], err, true))
            return false;
    }
    else
    {
        err="The date_added column cannot be null";
        return false;
    }
    if(pJson.isMember("ipfs_link"))
    {
        if(!validJsonOfField(12, "ipfs_link", pJson["ipfs_link"], err, true))
            return false;
    }
    else
    {
        err="The ipfs_link column cannot be null";
        return false;
    }
    if(pJson.isMember("global_id"))
    {
        if(!validJsonOfField(13, "global_id", pJson["global_id"], err, true))
            return false;
    }
    if(pJson.isMember("last_update"))
    {
        if(!validJsonOfField(14, "last_update", pJson["last_update"], err, true))
            return false;
    }
    return true;
}
bool Chapter::validateMasqueradedJsonForCreation(const Json::Value &pJson,
                                                 const std::vector<std::string> &pMasqueradingVector,
                                                 std::string &err)
{
    if(pMasqueradingVector.size() != 15)
    {
        err = "Bad masquerading vector";
        return false;
    }
    try {
      if(!pMasqueradingVector[0].empty())
      {
          if(pJson.isMember(pMasqueradingVector[0]))
          {
              if(!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[1].empty())
      {
          if(pJson.isMember(pMasqueradingVector[1]))
          {
              if(!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err, true))
                  return false;
          }
        else
        {
            err="The " + pMasqueradingVector[1] + " column cannot be null";
            return false;
        }
      }
      if(!pMasqueradingVector[2].empty())
      {
          if(pJson.isMember(pMasqueradingVector[2]))
          {
              if(!validJsonOfField(2, pMasqueradingVector[2], pJson[pMasqueradingVector[2]], err, true))
                  return false;
          }
        else
        {
            err="The " + pMasqueradingVector[2] + " column cannot be null";
            return false;
        }
      }
      if(!pMasqueradingVector[3].empty())
      {
          if(pJson.isMember(pMasqueradingVector[3]))
          {
              if(!validJsonOfField(3, pMasqueradingVector[3], pJson[pMasqueradingVector[3]], err, true))
                  return false;
          }
        else
        {
            err="The " + pMasqueradingVector[3] + " column cannot be null";
            return false;
        }
      }
      if(!pMasqueradingVector[4].empty())
      {
          if(pJson.isMember(pMasqueradingVector[4]))
          {
              if(!validJsonOfField(4, pMasqueradingVector[4], pJson[pMasqueradingVector[4]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[5].empty())
      {
          if(pJson.isMember(pMasqueradingVector[5]))
          {
              if(!validJsonOfField(5, pMasqueradingVector[5], pJson[pMasqueradingVector[5]], err, true))
                  return false;
          }
        else
        {
            err="The " + pMasqueradingVector[5] + " column cannot be null";
            return false;
        }
      }
      if(!pMasqueradingVector[6].empty())
      {
          if(pJson.isMember(pMasqueradingVector[6]))
          {
              if(!validJsonOfField(6, pMasqueradingVector[6], pJson[pMasqueradingVector[6]], err, true))
                  return false;
          }
        else
        {
            err="The " + pMasqueradingVector[6] + " column cannot be null";
            return false;
        }
      }
      if(!pMasqueradingVector[7].empty())
      {
          if(pJson.isMember(pMasqueradingVector[7]))
          {
              if(!validJsonOfField(7, pMasqueradingVector[7], pJson[pMasqueradingVector[7]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[8].empty())
      {
          if(pJson.isMember(pMasqueradingVector[8]))
          {
              if(!validJsonOfField(8, pMasqueradingVector[8], pJson[pMasqueradingVector[8]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[9].empty())
      {
          if(pJson.isMember(pMasqueradingVector[9]))
          {
              if(!validJsonOfField(9, pMasqueradingVector[9], pJson[pMasqueradingVector[9]], err, true))
                  return false;
          }
        else
        {
            err="The " + pMasqueradingVector[9] + " column cannot be null";
            return false;
        }
      }
      if(!pMasqueradingVector[10].empty())
      {
          if(pJson.isMember(pMasqueradingVector[10]))
          {
              if(!validJsonOfField(10, pMasqueradingVector[10], pJson[pMasqueradingVector[10]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[11].empty())
      {
          if(pJson.isMember(pMasqueradingVector[11]))
          {
              if(!validJsonOfField(11, pMasqueradingVector[11], pJson[pMasqueradingVector[11]], err, true))
                  return false;
          }
        else
        {
            err="The " + pMasqueradingVector[11] + " column cannot be null";
            return false;
        }
      }
      if(!pMasqueradingVector[12].empty())
      {
          if(pJson.isMember(pMasqueradingVector[12]))
          {
              if(!validJsonOfField(12, pMasqueradingVector[12], pJson[pMasqueradingVector[12]], err, true))
                  return false;
          }
        else
        {
            err="The " + pMasqueradingVector[12] + " column cannot be null";
            return false;
        }
      }
      if(!pMasqueradingVector[13].empty())
      {
          if(pJson.isMember(pMasqueradingVector[13]))
          {
              if(!validJsonOfField(13, pMasqueradingVector[13], pJson[pMasqueradingVector[13]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[14].empty())
      {
          if(pJson.isMember(pMasqueradingVector[14]))
          {
              if(!validJsonOfField(14, pMasqueradingVector[14], pJson[pMasqueradingVector[14]], err, true))
                  return false;
          }
      }
    }
    catch(const Json::LogicError &e) 
    {
      err = e.what();
      return false;
    }
    return true;
}
bool Chapter::validateJsonForUpdate(const Json::Value &pJson, std::string &err)
{
    if(pJson.isMember("id"))
    {
        if(!validJsonOfField(0, "id", pJson["id"], err, false))
            return false;
    }
    else
    {
        err = "The value of primary key must be set in the json object for update";
        return false;
    }
    if(pJson.isMember("manga_id"))
    {
        if(!validJsonOfField(1, "manga_id", pJson["manga_id"], err, false))
            return false;
    }
    if(pJson.isMember("manga_global_id"))
    {
        if(!validJsonOfField(2, "manga_global_id", pJson["manga_global_id"], err, false))
            return false;
    }
    if(pJson.isMember("chapter_no"))
    {
        if(!validJsonOfField(3, "chapter_no", pJson["chapter_no"], err, false))
            return false;
    }
    if(pJson.isMember("chapter_postfix"))
    {
        if(!validJsonOfField(4, "chapter_postfix", pJson["chapter_postfix"], err, false))
            return false;
    }
    if(pJson.isMember("ordinal"))
    {
        if(!validJsonOfField(5, "ordinal", pJson["ordinal"], err, false))
            return false;
    }
    if(pJson.isMember("pages"))
    {
        if(!validJsonOfField(6, "pages", pJson["pages"], err, false))
            return false;
    }
    if(pJson.isMember("title"))
    {
        if(!validJsonOfField(7, "title", pJson["title"], err, false))
            return false;
    }
    if(pJson.isMember("version"))
    {
        if(!validJsonOfField(8, "version", pJson["version"], err, false))
            return false;
    }
    if(pJson.isMember("language_id"))
    {
        if(!validJsonOfField(9, "language_id", pJson["language_id"], err, false))
            return false;
    }
    if(pJson.isMember("group_id"))
    {
        if(!validJsonOfField(10, "group_id", pJson["group_id"], err, false))
            return false;
    }
    if(pJson.isMember("date_added"))
    {
        if(!validJsonOfField(11, "date_added", pJson["date_added"], err, false))
            return false;
    }
    if(pJson.isMember("ipfs_link"))
    {
        if(!validJsonOfField(12, "ipfs_link", pJson["ipfs_link"], err, false))
            return false;
    }
    if(pJson.isMember("global_id"))
    {
        if(!validJsonOfField(13, "global_id", pJson["global_id"], err, false))
            return false;
    }
    if(pJson.isMember("last_update"))
    {
        if(!validJsonOfField(14, "last_update", pJson["last_update"], err, false))
            return false;
    }
    return true;
}
bool Chapter::validateMasqueradedJsonForUpdate(const Json::Value &pJson,
                                               const std::vector<std::string> &pMasqueradingVector,
                                               std::string &err)
{
    if(pMasqueradingVector.size() != 15)
    {
        err = "Bad masquerading vector";
        return false;
    }
    try {
      if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
      {
          if(!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, false))
              return false;
      }
    else
    {
        err = "The value of primary key must be set in the json object for update";
        return false;
    }
      if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
      {
          if(!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err, false))
              return false;
      }
      if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
      {
          if(!validJsonOfField(2, pMasqueradingVector[2], pJson[pMasqueradingVector[2]], err, false))
              return false;
      }
      if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
      {
          if(!validJsonOfField(3, pMasqueradingVector[3], pJson[pMasqueradingVector[3]], err, false))
              return false;
      }
      if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
      {
          if(!validJsonOfField(4, pMasqueradingVector[4], pJson[pMasqueradingVector[4]], err, false))
              return false;
      }
      if(!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
      {
          if(!validJsonOfField(5, pMasqueradingVector[5], pJson[pMasqueradingVector[5]], err, false))
              return false;
      }
      if(!pMasqueradingVector[6].empty() && pJson.isMember(pMasqueradingVector[6]))
      {
          if(!validJsonOfField(6, pMasqueradingVector[6], pJson[pMasqueradingVector[6]], err, false))
              return false;
      }
      if(!pMasqueradingVector[7].empty() && pJson.isMember(pMasqueradingVector[7]))
      {
          if(!validJsonOfField(7, pMasqueradingVector[7], pJson[pMasqueradingVector[7]], err, false))
              return false;
      }
      if(!pMasqueradingVector[8].empty() && pJson.isMember(pMasqueradingVector[8]))
      {
          if(!validJsonOfField(8, pMasqueradingVector[8], pJson[pMasqueradingVector[8]], err, false))
              return false;
      }
      if(!pMasqueradingVector[9].empty() && pJson.isMember(pMasqueradingVector[9]))
      {
          if(!validJsonOfField(9, pMasqueradingVector[9], pJson[pMasqueradingVector[9]], err, false))
              return false;
      }
      if(!pMasqueradingVector[10].empty() && pJson.isMember(pMasqueradingVector[10]))
      {
          if(!validJsonOfField(10, pMasqueradingVector[10], pJson[pMasqueradingVector[10]], err, false))
              return false;
      }
      if(!pMasqueradingVector[11].empty() && pJson.isMember(pMasqueradingVector[11]))
      {
          if(!validJsonOfField(11, pMasqueradingVector[11], pJson[pMasqueradingVector[11]], err, false))
              return false;
      }
      if(!pMasqueradingVector[12].empty() && pJson.isMember(pMasqueradingVector[12]))
      {
          if(!validJsonOfField(12, pMasqueradingVector[12], pJson[pMasqueradingVector[12]], err, false))
              return false;
      }
      if(!pMasqueradingVector[13].empty() && pJson.isMember(pMasqueradingVector[13]))
      {
          if(!validJsonOfField(13, pMasqueradingVector[13], pJson[pMasqueradingVector[13]], err, false))
              return false;
      }
      if(!pMasqueradingVector[14].empty() && pJson.isMember(pMasqueradingVector[14]))
      {
          if(!validJsonOfField(14, pMasqueradingVector[14], pJson[pMasqueradingVector[14]], err, false))
              return false;
      }
    }
    catch(const Json::LogicError &e) 
    {
      err = e.what();
      return false;
    }
    return true;
}
bool Chapter::validJsonOfField(size_t index,
                               const std::string &fieldName,
                               const Json::Value &pJson, 
                               std::string &err, 
                               bool isForCreation)
{
    switch(index)
    {
        case 0:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(isForCreation)
            {
                err="The automatic primary key cannot be set";
                return false;
            }        
            if(!pJson.isUInt64())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 1:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isUInt64())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 2:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;                
            }
            break;
        case 3:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isUInt64())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 4:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;                
            }
            break;
        case 5:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isUInt64())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 6:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isUInt64())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 7:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;                
            }
            break;
        case 8:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isUInt64())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 9:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;                
            }
            break;
        case 10:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isUInt64())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 11:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isUInt64())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 12:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;                
            }
            break;
        case 13:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;                
            }
            break;
        case 14:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isUInt64())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
     
        default:
            err="Internal error in the server";
            return false;
            break;
    }
    return true;
}
void Chapter::getManga(const DbClientPtr &clientPtr, 
                       const std::function<void(Manga)> &rcb,
                       const ExceptionCallback &ecb) const
{
    const static std::string sql = "select * from manga where id = ?";
    *clientPtr << sql
               << *mangaId_ 
               >> [rcb = std::move(rcb), ecb](const Result &r){
                    if (r.size() == 0)
                    {
                        ecb(UnexpectedRows("0 rows found"));
                    }
                    else if (r.size() > 1)
                    {
                        ecb(UnexpectedRows("Found more than one row"));
                    }
                    else
                    {
                        rcb(Manga(r[0]));
                    }
               }
               >> ecb;
}
