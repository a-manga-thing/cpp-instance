/**
 *
 *  GlobalState.cc
 *  DO NOT EDIT. This file is generated by drogon_ctl
 *
 */

#include "GlobalState.h"
#include <drogon/utils/Utilities.h>
#include <string>

using namespace drogon;
using namespace drogon_model::sqlite3;

const std::string GlobalState::Cols::_last_update = "last_update";
const std::string GlobalState::primaryKeyName = "";
const bool GlobalState::hasPrimaryKey = false;
const std::string GlobalState::tableName = "global_state";

const std::vector<typename GlobalState::MetaData> GlobalState::metaData_={
{"last_update","uint64_t","integer",8,0,0,0}
};
const std::string &GlobalState::getColumnName(size_t index) noexcept(false)
{
    assert(index < metaData_.size());
    return metaData_[index].colName_;
}
GlobalState::GlobalState(const Row &r, const ssize_t indexOffset) noexcept
{
    if(indexOffset < 0)
    {
        if(!r["last_update"].isNull())
        {
            lastUpdate_=std::make_shared<uint64_t>(r["last_update"].as<uint64_t>());
        }
    }
    else
    {
        size_t offset = (size_t)indexOffset;
        if(offset + 1 > r.size())
        {
            LOG_FATAL << "Invalid SQL result for this model";
            return;
        }
        size_t index;
        index = offset + 0;
        if(!r[index].isNull())
        {
            lastUpdate_=std::make_shared<uint64_t>(r[index].as<uint64_t>());
        }
    }

}

GlobalState::GlobalState(const Json::Value &pJson, const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if(pMasqueradingVector.size() != 1)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        dirtyFlag_[0] = true;
        if(!pJson[pMasqueradingVector[0]].isNull())
        {
            lastUpdate_=std::make_shared<uint64_t>((uint64_t)pJson[pMasqueradingVector[0]].asUInt64());
        }
    }
}

GlobalState::GlobalState(const Json::Value &pJson) noexcept(false)
{
    if(pJson.isMember("last_update"))
    {
        dirtyFlag_[0]=true;
        if(!pJson["last_update"].isNull())
        {
            lastUpdate_=std::make_shared<uint64_t>((uint64_t)pJson["last_update"].asUInt64());
        }
    }
}

void GlobalState::updateByMasqueradedJson(const Json::Value &pJson,
                                            const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if(pMasqueradingVector.size() != 1)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        dirtyFlag_[0] = true;
        if(!pJson[pMasqueradingVector[0]].isNull())
        {
            lastUpdate_=std::make_shared<uint64_t>((uint64_t)pJson[pMasqueradingVector[0]].asUInt64());
        }
    }
}
                                                                    
void GlobalState::updateByJson(const Json::Value &pJson) noexcept(false)
{
    if(pJson.isMember("last_update"))
    {
        dirtyFlag_[0] = true;
        if(!pJson["last_update"].isNull())
        {
            lastUpdate_=std::make_shared<uint64_t>((uint64_t)pJson["last_update"].asUInt64());
        }
    }
}

const uint64_t &GlobalState::getValueOfLastUpdate() const noexcept
{
    const static uint64_t defaultValue = uint64_t();
    if(lastUpdate_)
        return *lastUpdate_;
    return defaultValue;
}
const std::shared_ptr<uint64_t> &GlobalState::getLastUpdate() const noexcept
{
    return lastUpdate_;
}
void GlobalState::setLastUpdate(const uint64_t &pLastUpdate) noexcept
{
    lastUpdate_ = std::make_shared<uint64_t>(pLastUpdate);
    dirtyFlag_[0] = true;
}


void GlobalState::setLastUpdateToNull() noexcept
{
    lastUpdate_.reset();
    dirtyFlag_[0] = true;
}


void GlobalState::updateId(const uint64_t id)
{
}

const std::vector<std::string> &GlobalState::insertColumns() noexcept
{
    static const std::vector<std::string> inCols={
        "last_update"
    };
    return inCols;
}

void GlobalState::outputArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(dirtyFlag_[0])
    {
        if(getLastUpdate())
        {
            binder << getValueOfLastUpdate();
        }
        else
        {
            binder << nullptr;
        }
    }
}

const std::vector<std::string> GlobalState::updateColumns() const
{
    std::vector<std::string> ret;
    if(dirtyFlag_[0])
    {
        ret.push_back(getColumnName(0));
    }
    return ret;
}

void GlobalState::updateArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(dirtyFlag_[0])
    {
        if(getLastUpdate())
        {
            binder << getValueOfLastUpdate();
        }
        else
        {
            binder << nullptr;
        }
    }
}
Json::Value GlobalState::toJson() const
{
    Json::Value ret;
    if(getLastUpdate())
    {
        ret["last_update"]=(Json::UInt64)getValueOfLastUpdate();
    }
    else
    {
        ret["last_update"]=Json::Value();
    }
    return ret;
}

Json::Value GlobalState::toMasqueradedJson(
    const std::vector<std::string> &pMasqueradingVector) const
{
    Json::Value ret;
    if(pMasqueradingVector.size() == 1)
    {
        if(!pMasqueradingVector[0].empty())
        {
            if(getLastUpdate())
            {
                ret[pMasqueradingVector[0]]=(Json::UInt64)getValueOfLastUpdate();
            }
            else
            {
                ret[pMasqueradingVector[0]]=Json::Value();
            }
        }
        return ret;
    }
    LOG_ERROR << "Masquerade failed";
    if(getLastUpdate())
    {
        ret["last_update"]=(Json::UInt64)getValueOfLastUpdate();
    }
    else
    {
        ret["last_update"]=Json::Value();
    }
    return ret;
}

bool GlobalState::validateJsonForCreation(const Json::Value &pJson, std::string &err)
{
    if(pJson.isMember("last_update"))
    {
        if(!validJsonOfField(0, "last_update", pJson["last_update"], err, true))
            return false;
    }
    return true;
}
bool GlobalState::validateMasqueradedJsonForCreation(const Json::Value &pJson,
                                                     const std::vector<std::string> &pMasqueradingVector,
                                                     std::string &err)
{
    if(pMasqueradingVector.size() != 1)
    {
        err = "Bad masquerading vector";
        return false;
    }
    try {
      if(!pMasqueradingVector[0].empty())
      {
          if(pJson.isMember(pMasqueradingVector[0]))
          {
              if(!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, true))
                  return false;
          }
      }
    }
    catch(const Json::LogicError &e) 
    {
      err = e.what();
      return false;
    }
    return true;
}
bool GlobalState::validateJsonForUpdate(const Json::Value &pJson, std::string &err)
{
    if(pJson.isMember("last_update"))
    {
        if(!validJsonOfField(0, "last_update", pJson["last_update"], err, false))
            return false;
    }
    return true;
}
bool GlobalState::validateMasqueradedJsonForUpdate(const Json::Value &pJson,
                                                   const std::vector<std::string> &pMasqueradingVector,
                                                   std::string &err)
{
    if(pMasqueradingVector.size() != 1)
    {
        err = "Bad masquerading vector";
        return false;
    }
    try {
      if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
      {
          if(!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, false))
              return false;
      }
    }
    catch(const Json::LogicError &e) 
    {
      err = e.what();
      return false;
    }
    return true;
}
bool GlobalState::validJsonOfField(size_t index,
                                   const std::string &fieldName,
                                   const Json::Value &pJson, 
                                   std::string &err, 
                                   bool isForCreation)
{
    switch(index)
    {
        case 0:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isUInt64())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
     
        default:
            err="Internal error in the server";
            return false;
            break;
    }
    return true;
}
